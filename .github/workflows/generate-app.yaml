name: Generate Flutter App (Improved)

on:
  workflow_dispatch:
    inputs:
      jobId:
        description: "Job ID for tracking"
        required: true
      storeId:
        description: "Store ID"
        required: true
      callbackUrl:
        description: "Callback URL for status updates"
        required: true
      config:
        description: "Store configuration JSON"
        required: true

jobs:
  generate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      # Setup Pusher notification helper script
      - name: Setup Pusher notification helper
        run: |
          cat > send-pusher-notification.js << 'EOF'
          const Pusher = require('pusher');
          
          // Create Pusher client with env variables
          const pusher = new Pusher({
            appId: process.env.PUSHER_APP_ID,
            key: process.env.PUSHER_KEY,
            secret: process.env.PUSHER_SECRET,
            cluster: process.env.PUSHER_CLUSTER,
            useTLS: true
          });
          
          // Get command line arguments
          const jobId = process.argv[2];
          const storeId = process.argv[3];
          const status = process.argv[4];
          const message = process.argv[5];
          const progress = parseInt(process.argv[6]) || 0;
          const downloadUrl = process.argv[7] || '';
          
          // Validate required params
          if (!jobId || !storeId || !status || !message) {
            console.error('Missing required parameters');
            console.error('Usage: node send-pusher-notification.js <jobId> <storeId> <status> <message> [progress] [downloadUrl]');
            process.exit(1);
          }
          
          async function sendNotification() {
            try {
              const eventData = {
                jobId,
                storeId,
                status,
                message,
                progress,
                downloadUrl,
                timestamp: new Date().toISOString()
              };
              
              console.log(`Sending Pusher notification to channel store-${storeId}:`, eventData);
              
              // Send notification via Pusher
              await pusher.trigger(
                `store-${storeId}`,
                'app-generation-update',
                eventData
              );
              
              console.log('Pusher notification sent successfully');
            } catch (error) {
              console.error('Failed to send Pusher notification:', error);
              // Don't fail the build if notification fails
            }
          }
          
          sendNotification();
          EOF
          
          # Install pusher
          npm install pusher

      # Send initial notification
      - name: Send initial notification
        env:
          PUSHER_APP_ID: ${{ secrets.PUSHER_APP_ID }}
          PUSHER_KEY: ${{ secrets.PUSHER_KEY }}
          PUSHER_SECRET: ${{ secrets.PUSHER_SECRET }}
          PUSHER_CLUSTER: ${{ secrets.PUSHER_CLUSTER }}
        run: |
          node send-pusher-notification.js "${{ github.event.inputs.jobId }}" "${{ github.event.inputs.storeId }}" "IN_PROGRESS" "Starting Flutter app generation" 5

      - name: Validate callback URL
        run: |
          CALLBACK_URL="${{ github.event.inputs.callbackUrl }}"
          if [[ "$CALLBACK_URL" == *"localhost"* || "$CALLBACK_URL" == *"undefined"* || -z "$CALLBACK_URL" ]]; then
            echo "Error: Invalid callback URL: $CALLBACK_URL. Cannot use localhost in production."
            exit 1
          fi
          echo "Callback URL validated: $CALLBACK_URL"
          
      # Send notification after callback URL validation
      - name: Send validation completed notification
        if: success()
        env:
          PUSHER_APP_ID: ${{ secrets.PUSHER_APP_ID }}
          PUSHER_KEY: ${{ secrets.PUSHER_KEY }}
          PUSHER_SECRET: ${{ secrets.PUSHER_SECRET }}
          PUSHER_CLUSTER: ${{ secrets.PUSHER_CLUSTER }}
        run: |
          node send-pusher-notification.js "${{ github.event.inputs.jobId }}" "${{ github.event.inputs.storeId }}" "IN_PROGRESS" "Configuration validation successful" 10

      - name: Create config file
        run: |
          echo '${{ github.event.inputs.config }}' > quick-config.json
          
      - name: Validate QuickConfig file
        run: |
          if [ ! -f quick-config.json ]; then
            echo "Error: quick-config.json file not found!"
            exit 1
          fi
          echo "QuickConfig file created successfully."
          
      - name: Print quick-config.json contents
        run: |
          echo "========== QUICK-CONFIG.JSON CONTENTS =========="
          cat quick-config.json
          echo "========== END QUICK-CONFIG.JSON CONTENTS =========="
      
      - name: Convert Config to QuickConfig
        run: |
          npm run convert:to-store
        
      # Send notification after config processing
      - name: Send config processing notification
        if: success()
        env:
          PUSHER_APP_ID: ${{ secrets.PUSHER_APP_ID }}
          PUSHER_KEY: ${{ secrets.PUSHER_KEY }}
          PUSHER_SECRET: ${{ secrets.PUSHER_SECRET }}
          PUSHER_CLUSTER: ${{ secrets.PUSHER_CLUSTER }}
        run: |
          node send-pusher-notification.js "${{ github.event.inputs.jobId }}" "${{ github.event.inputs.storeId }}" "IN_PROGRESS" "Store configuration processed" 20
      
      - name: Validate config file
        run: |
          if [ ! -f config.json ]; then
            echo "Error: config.json file not found!"
            exit 1
          fi
          echo "Config file created successfully."
          
      - name: Print config.json contents
        run: |
          echo "========== CONFIG.JSON CONTENTS =========="
          cat config.json
          echo "========== END CONFIG.JSON CONTENTS =========="
          
      - name: Scan Template files
        id: scan
        run: |
          npm run scan:fashion
          
      # Send notification after template scanning
      - name: Send template scanning notification
        if: success()
        env:
          PUSHER_APP_ID: ${{ secrets.PUSHER_APP_ID }}
          PUSHER_KEY: ${{ secrets.PUSHER_KEY }}
          PUSHER_SECRET: ${{ secrets.PUSHER_SECRET }}
          PUSHER_CLUSTER: ${{ secrets.PUSHER_CLUSTER }}
        run: |
          node send-pusher-notification.js "${{ github.event.inputs.jobId }}" "${{ github.event.inputs.storeId }}" "IN_PROGRESS" "Template files scanned" 30
          
      - name: Check for Project structure file
        run: |
          if [ ! -f "project-structure/fashion.json" ]; then
            echo "Error: fashion.json file not found!"
            exit 1
          fi
          echo "Fashion file scanned successfully."

      - name: Print fashion.json contents
        run: |
          echo "========== FASHION.JSON CONTENTS =========="
          cat project-structure/fashion.json
          echo "========== END FASHION.JSON CONTENTS =========="

      # Send notification before code generation
      - name: Send pre-generation notification
        env:
          PUSHER_APP_ID: ${{ secrets.PUSHER_APP_ID }}
          PUSHER_KEY: ${{ secrets.PUSHER_KEY }}
          PUSHER_SECRET: ${{ secrets.PUSHER_SECRET }}
          PUSHER_CLUSTER: ${{ secrets.PUSHER_CLUSTER }}
        run: |
          node send-pusher-notification.js "${{ github.event.inputs.jobId }}" "${{ github.event.inputs.storeId }}" "IN_PROGRESS" "Starting code generation" 40

      - name: Generate Flutter app
        id: generate
        run: |
          npm run generate:fashion
          echo "Listing generated directory contents:"
          ls -la generated-app
          
      # Send notification after code generation
      - name: Send post-generation notification
        if: steps.generate.outcome == 'success'
        env:
          PUSHER_APP_ID: ${{ secrets.PUSHER_APP_ID }}
          PUSHER_KEY: ${{ secrets.PUSHER_KEY }}
          PUSHER_SECRET: ${{ secrets.PUSHER_SECRET }}
          PUSHER_CLUSTER: ${{ secrets.PUSHER_CLUSTER }}
        run: |
          node send-pusher-notification.js "${{ github.event.inputs.jobId }}" "${{ github.event.inputs.storeId }}" "IN_PROGRESS" "Flutter code generation complete" 60
          
      # Use a Flutter version with Dart SDK 3.7.0 or newer
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: false  # Disable caching to ensure clean installation
            
      - name: Verify Flutter and Dart versions
        run: |
          flutter --version
          dart --version
          
      # Send notification after Flutter setup
      - name: Send Flutter setup notification
        env:
          PUSHER_APP_ID: ${{ secrets.PUSHER_APP_ID }}
          PUSHER_KEY: ${{ secrets.PUSHER_KEY }}
          PUSHER_SECRET: ${{ secrets.PUSHER_SECRET }}
          PUSHER_CLUSTER: ${{ secrets.PUSHER_CLUSTER }}
        run: |
          node send-pusher-notification.js "${{ github.event.inputs.jobId }}" "${{ github.event.inputs.storeId }}" "IN_PROGRESS" "Flutter setup complete, preparing build" 70
          
      - name: Flutter clean
        run: |
          cd generated-app
          flutter clean
      # Send notification before icon generation
      - name: Send app icon preparation notification
        env:
          PUSHER_APP_ID: ${{ secrets.PUSHER_APP_ID }}
          PUSHER_KEY: ${{ secrets.PUSHER_KEY }}
          PUSHER_SECRET: ${{ secrets.PUSHER_SECRET }}
          PUSHER_CLUSTER: ${{ secrets.PUSHER_CLUSTER }}
        run: |
          node send-pusher-notification.js "${{ github.event.inputs.jobId }}" "${{ github.event.inputs.storeId }}" "IN_PROGRESS" "Setting up app icon" 70
      - name: Generate app icons
        run: |
          cd generated-app
          flutter pub run flutter_launcher_icons
      # Send notification after icon generation
      - name: Send app icon completion notification
        env:
          PUSHER_APP_ID: ${{ secrets.PUSHER_APP_ID }}
          PUSHER_KEY: ${{ secrets.PUSHER_KEY }}
          PUSHER_SECRET: ${{ secrets.PUSHER_SECRET }}
          PUSHER_CLUSTER: ${{ secrets.PUSHER_CLUSTER }}
        run: |
          node send-pusher-notification.js "${{ github.event.inputs.jobId }}" "${{ github.event.inputs.storeId }}" "IN_PROGRESS" "App icon generated" 75

       # Send notification before splash screen generation
      - name: Send splash screen preparation notification
        env:
          PUSHER_APP_ID: ${{ secrets.PUSHER_APP_ID }}
          PUSHER_KEY: ${{ secrets.PUSHER_KEY }}
          PUSHER_SECRET: ${{ secrets.PUSHER_SECRET }}
          PUSHER_CLUSTER: ${{ secrets.PUSHER_CLUSTER }}
        run: |
          node send-pusher-notification.js "${{ github.event.inputs.jobId }}" "${{ github.event.inputs.storeId }}" "IN_PROGRESS" "Setting up splash screen" 76
      - name: Generate splash screen
        run: |
          cd generated-app
          flutter pub run flutter_native_splash:create
      # Send notification after splash screen generation
      - name: Send splash screen completion notification
        env:
          PUSHER_APP_ID: ${{ secrets.PUSHER_APP_ID }}
          PUSHER_KEY: ${{ secrets.PUSHER_KEY }}
          PUSHER_SECRET: ${{ secrets.PUSHER_SECRET }}
          PUSHER_CLUSTER: ${{ secrets.PUSHER_CLUSTER }}
        run: |
          node send-pusher-notification.js "${{ github.event.inputs.jobId }}" "${{ github.event.inputs.storeId }}" "IN_PROGRESS" "Splash screen generated" 78

      # Send notification before APK build
      - name: Send pre-build notification
        env:
          PUSHER_APP_ID: ${{ secrets.PUSHER_APP_ID }}
          PUSHER_KEY: ${{ secrets.PUSHER_KEY }}
          PUSHER_SECRET: ${{ secrets.PUSHER_SECRET }}
          PUSHER_CLUSTER: ${{ secrets.PUSHER_CLUSTER }}
        run: |
          node send-pusher-notification.js "${{ github.event.inputs.jobId }}" "${{ github.event.inputs.storeId }}" "IN_PROGRESS" "Building APK" 80

      - name: Build APK
        id: build_apk
        run: |
          cd generated-app
          flutter build apk --target-platform android-arm64 --analyze-size
          
      - name: Check APK size
        run: |
          cd generated-app/build/app/outputs/flutter-apk
          ls -lh app-release.apk
          
      # Send notification after APK build
      - name: Send post-build notification
        if: steps.build_apk.outcome == 'success'
        env:
          PUSHER_APP_ID: ${{ secrets.PUSHER_APP_ID }}
          PUSHER_KEY: ${{ secrets.PUSHER_KEY }}
          PUSHER_SECRET: ${{ secrets.PUSHER_SECRET }}
          PUSHER_CLUSTER: ${{ secrets.PUSHER_CLUSTER }}
        run: |
          node send-pusher-notification.js "${{ github.event.inputs.jobId }}" "${{ github.event.inputs.storeId }}" "IN_PROGRESS" "APK built successfully, uploading" 90
          
      - name: Upload APK to ImageKit
        id: imagekit_upload
        if: steps.build_apk.outcome == 'success'
        env:
          IMAGEKIT_PUBLIC_KEY: ${{ secrets.IMAGEKIT_PUBLIC_KEY }}
          IMAGEKIT_PRIVATE_KEY: ${{ secrets.IMAGEKIT_PRIVATE_KEY }}
          IMAGEKIT_URL_ENDPOINT: ${{ secrets.IMAGEKIT_URL_ENDPOINT }}
        run: |
          npm install imagekit
          cat <<EOF > upload.js
          const ImageKit = require('imagekit');
          const fs = require('fs').promises;
          const imagekit = new ImageKit({
            publicKey: process.env.IMAGEKIT_PUBLIC_KEY,
            privateKey: process.env.IMAGEKIT_PRIVATE_KEY,
            urlEndpoint: process.env.IMAGEKIT_URL_ENDPOINT
          });
          async function upload() {
            const apkPath = 'generated-app/build/app/outputs/flutter-apk/app-release.apk';
            const file = await fs.readFile(apkPath);
            const result = await imagekit.upload({
              file: file,
              fileName: 'app-${{ github.event.inputs.jobId }}.apk',
              folder: '/store-apps'
            });
            console.log(result.url);
          }
          upload().catch(error => {
            console.error(error);
            process.exit(1);
          });
          EOF
          DOWNLOAD_URL=$(node upload.js)
          if [ -n "$DOWNLOAD_URL" ]; then
            echo "download_url=$DOWNLOAD_URL" >> $GITHUB_OUTPUT
            echo "APK uploaded to: $DOWNLOAD_URL"
          else
            echo "Failed to upload APK"
            exit 1
          fi
          
      # Send notification after APK upload
      - name: Send upload success notification
        if: steps.imagekit_upload.outcome == 'success'
        env:
          PUSHER_APP_ID: ${{ secrets.PUSHER_APP_ID }}
          PUSHER_KEY: ${{ secrets.PUSHER_KEY }}
          PUSHER_SECRET: ${{ secrets.PUSHER_SECRET }}
          PUSHER_CLUSTER: ${{ secrets.PUSHER_CLUSTER }}
        run: |
          node send-pusher-notification.js "${{ github.event.inputs.jobId }}" "${{ github.event.inputs.storeId }}" "IN_PROGRESS" "APK uploaded successfully" 95 "${{ steps.imagekit_upload.outputs.download_url }}"
          
      - name: Upload APK as GitHub artifact (backup)
        if: steps.build_apk.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: generated-app/build/app/outputs/flutter-apk/app-release.apk

      # Enhanced callback with robust error handling, retries and URL validation
      - name: Send completion callback
        if: always()
        run: |
          STATUS="FAILED"
          PROGRESS=0
          MESSAGE="Flutter app generation failed"
          
          # Initialize with empty string, not undefined
          DOWNLOAD_URL=""
          
          # Debug information
          echo "ImageKit upload outcome: ${{ steps.imagekit_upload.outcome }}"
          echo "ImageKit download URL output: ${{ steps.imagekit_upload.outputs.download_url }}"
          
          # If APK was successfully built and uploaded
          if [[ "${{ steps.imagekit_upload.outcome }}" == "success" ]]; then
            if [[ -n "${{ steps.imagekit_upload.outputs.download_url }}" ]]; then
              STATUS="COMPLETED"
              PROGRESS=100
              MESSAGE="Flutter app generation completed successfully"
              DOWNLOAD_URL="${{ steps.imagekit_upload.outputs.download_url }}"
              echo "Download URL set to: $DOWNLOAD_URL"
            else
              echo "Warning: ImageKit upload was successful but no download URL was provided"
            fi
          else
            if [[ "${{ steps.build_apk.outcome }}" != "success" ]]; then
              MESSAGE="Failed to build APK"
            else
              MESSAGE="Failed to upload APK to storage"
            fi
          fi
          
          # Validate callback URL - don't proceed if it's invalid
          CALLBACK_URL="${{ github.event.inputs.callbackUrl }}"
          
          if [[ "$CALLBACK_URL" == *"localhost"* || "$CALLBACK_URL" == *"undefined"* || -z "$CALLBACK_URL" ]]; then
            echo "Error: Invalid callback URL: $CALLBACK_URL"
            echo "Skipping callback due to invalid URL"
            exit 0
          fi
          
          echo "Callback URL: $CALLBACK_URL"
          
          # Construct the JSON payload using a temporary file to avoid shell interpretation issues
          cat > payload.json << EOF
          {
            "jobId": "${{ github.event.inputs.jobId }}",
            "status": "$STATUS",
            "downloadUrl": "$DOWNLOAD_URL",
            "progress": $PROGRESS,
            "message": "$MESSAGE"
          }
          EOF
          
          # Show the payload for debugging
          echo "Sending payload:"
          cat payload.json
          
          # Send callback with retries
          MAX_RETRIES=3
          RETRY_COUNT=0
          SUCCESS=false
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$SUCCESS" != "true" ]; do
            echo "Sending callback, attempt $((RETRY_COUNT+1)) of $MAX_RETRIES"
            
            HTTP_STATUS=$(curl -s -o response.txt -w "%{http_code}" -X POST "$CALLBACK_URL" \
              -H "Content-Type: application/json" \
              --data @payload.json)
              
            if [ "$HTTP_STATUS" -ge 200 ] && [ "$HTTP_STATUS" -lt 300 ]; then
              echo "Callback succeeded with HTTP status $HTTP_STATUS"
              SUCCESS=true
              break
            else
              echo "Callback failed with HTTP status $HTTP_STATUS"
              echo "Response body:"
              cat response.txt
              
              RETRY_COUNT=$((RETRY_COUNT+1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                WAIT_TIME=$((5 * RETRY_COUNT))
                echo "Waiting $WAIT_TIME seconds before retry..."
                sleep $WAIT_TIME
              fi
            fi
          done
          
          if [ "$SUCCESS" != "true" ]; then
            echo "All callback attempts failed."
          fi
      
      # Send final notification with result
      - name: Send final notification
        if: always()
        env:
          PUSHER_APP_ID: ${{ secrets.PUSHER_APP_ID }}
          PUSHER_KEY: ${{ secrets.PUSHER_KEY }}
          PUSHER_SECRET: ${{ secrets.PUSHER_SECRET }}
          PUSHER_CLUSTER: ${{ secrets.PUSHER_CLUSTER }}
        run: |
          STATUS="FAILED"
          PROGRESS=0
          MESSAGE="Flutter app generation failed"
          DOWNLOAD_URL=""
          
          # Check the outcomes to determine final status
          if [[ "${{ steps.imagekit_upload.outcome }}" == "success" && -n "${{ steps.imagekit_upload.outputs.download_url }}" ]]; then
            STATUS="COMPLETED"
            PROGRESS=100
            MESSAGE="Flutter app generation completed successfully"
            DOWNLOAD_URL="${{ steps.imagekit_upload.outputs.download_url }}"
          elif [[ "${{ steps.build_apk.outcome }}" != "success" ]]; then
            MESSAGE="Failed to build APK"
          else
            MESSAGE="Failed to upload APK to storage"
          fi
          
          # Send final notification via Pusher
          node send-pusher-notification.js "${{ github.event.inputs.jobId }}" "${{ github.event.inputs.storeId }}" "$STATUS" "$MESSAGE" $PROGRESS "$DOWNLOAD_URL"