name: Generate Flutter App

on:
  workflow_dispatch:
    inputs:
      jobId:
        description: "Job ID for tracking"
        required: true
      storeId:
        description: "Store ID"
        required: true
      callbackUrl:
        description: "Callback URL for status updates"
        required: true
      config:
        description: "Store configuration JSON"
        required: true

jobs:
  generate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Create config file
        run: |
          echo '${{ github.event.inputs.config }}' > quick-config.json
          npm run convert:to-store

      - name: Generate Flutter app
        id: generate
        run: |
          npm run generate:fashion
          echo "::set-output name=app_path::generated-app"

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.10.0"

      - name: Build APK
        run: |
          cd generated-app
          flutter pub get
          flutter build apk --release

      - name: Upload APK to ImageKit
        id: imagekit_upload
        env:
          IMAGEKIT_PUBLIC_KEY: ${{ secrets.IMAGEKIT_PUBLIC_KEY }}
          IMAGEKIT_PRIVATE_KEY: ${{ secrets.IMAGEKIT_PRIVATE_KEY }}
          IMAGEKIT_URL_ENDPOINT: ${{ secrets.IMAGEKIT_URL_ENDPOINT }}
        run: |
          # Install ImageKit upload tool
          npm install -g imagekit-cli

          # Set APK filename with storeId and jobId for unique identification
          APK_FILENAME="app-${{ github.event.inputs.storeId }}-${{ github.event.inputs.jobId }}.apk"

          # Use ImageKit CLI to upload the APK
          APK_PATH="generated-app/build/app/outputs/flutter-apk/app-release.apk"
          UPLOAD_RESULT=$(imagekit upload --file "$APK_PATH" --fileName "$APK_FILENAME" --folder "/store-apps" --usePrivateKey)

          # Extract the URL from the upload result using grep and sed
          DOWNLOAD_URL=$(echo "$UPLOAD_RESULT" | grep -o '"url":"[^"]*"' | sed 's/"url":"//;s/"//')

          # Set output variable for use in next step
          echo "::set-output name=download_url::$DOWNLOAD_URL"
          echo "APK uploaded to: $DOWNLOAD_URL"

      - name: Upload APK as GitHub artifact (backup)
        uses: actions/upload-artifact@v3
        with:
          name: app-release
          path: generated-app/build/app/outputs/flutter-apk/app-release.apk

      - name: Send completion callback
        run: |
          # Use the ImageKit URL from the previous step
          DOWNLOAD_URL="${{ steps.imagekit_upload.outputs.download_url }}"

          # Send callback with status update
          curl -X POST "${{ github.event.inputs.callbackUrl }}" \
            -H "Content-Type: application/json" \
            -d '{
              "jobId": "${{ github.event.inputs.jobId }}",
              "status": "COMPLETED",
              "downloadUrl": "'"$DOWNLOAD_URL"'",
              "progress": 100
            }'
