import 'package:get/get.dart';
import 'package:logger/logger.dart';
import 'package:{{ snakeCase appName }}/features/category/models/category.model.dart';
import 'package:{{ snakeCase appName }}/features/product/controllers/product_controller.dart';
import 'dart:developer' as developer; // Corrected import
import 'package:{{ snakeCase appName }}/app/core/localization/translation_extension.dart';

class ProductFilterController extends GetxController {
  final ProductController productController;
  final Logger _logger = Logger();

  // Filter state
  final RxString selectedCategory = 'filter.all'.translate().obs;
  final RxString selectedSubcategoryId = ''.obs;
  final RxString selectedSortOption = 'filter.latest'.translate().obs;
  final RxDouble minPrice = 0.0.obs;
  final RxDouble maxPrice = 1000.0.obs;
  final RxInt minRating = 0.obs;

  ProductFilterController({required this.productController});

  @override
  void onInit() {
    super.onInit();
    final args = Get.arguments;
    if (args != null) {
      // Check if args is a Map
      if (args is Map && args['subcategoryId'] != null) {
        selectedSubcategoryId.value = args['subcategoryId'];
      }
      // Check if args is a Category object
      else if (args is Category) {
        selectedCategory.value = args.id;
      }
    }
  }

  Future<void> applyFilters() async {
    try {
      // Ensure price values are properly formatted for filtering
      double finalMinPrice = minPrice.value;
      double finalMaxPrice = maxPrice.value;

      // Log current filter values before applying
      developer.log(
        'About to apply filters - Raw price values: min=$finalMinPrice, max=$finalMaxPrice',
        name: 'ProductFilterController.applyFilters',
      );

      // Apply filters to the product controller
      await productController.filterProducts(
        category:
            selectedCategory.value == 'filter.all'.translate()
                ? null
                : selectedCategory.value,
        subcategory:
            selectedSubcategoryId.value.isEmpty
                ? null
                : selectedSubcategoryId.value,
        minPrice: finalMinPrice,
        maxPrice: finalMaxPrice,
        sortBy: selectedSortOption.value,
        rating: minRating.value,
      );

      developer.log(
        'Applied filters: category=${selectedCategory.value}, '
        'subcategory=${selectedSubcategoryId.value}, '
        'price=${finalMinPrice}-${finalMaxPrice}, '
        'sort=${selectedSortOption.value}, '
        'rating=${minRating.value}',
        name: 'ProductFilterController.applyFilters',
      );
      return;
    } catch (e) {
      _logger.e('Error applying filters: $e');
      developer.log(
        'Error applying filters: $e',
        name: 'ProductFilterController.applyFilters',
        error: e,
      );
      throw e;
    }
  }

  Future<void> clearFilters() async {
    selectedCategory.value = 'filter.all'.translate();
    selectedSubcategoryId.value = '';
    selectedSortOption.value = 'filter.latest'.translate();
    minPrice.value = 0.0;
    maxPrice.value = 1000.0;
    minRating.value = 0;
    await productController.clearFilters();
    developer.log(
      'Cleared all filters',
      name: 'ProductFilterController.clearFilters',
    );
  }

  List<String> get sortOptions => [
    'filter.latest'.translate(),
    'filter.new_today'.translate(),
    'filter.top_sellers'.translate(),
    'filter.new_collection'.translate(),
  ];
}

