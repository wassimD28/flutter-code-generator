import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:{{ snakeCase appName }}/app/core/theme/app_theme_colors.dart';
import 'package:{{ snakeCase appName }}/app/core/theme/ui_config.dart';
import 'package:{{ snakeCase appName }}/app/core/localization/translation_extension.dart';
import 'package:{{ snakeCase appName }}/app/shared/extensions/text_extensions.dart';
import 'package:{{ snakeCase appName }}/features/order/model/order_model.dart';

class OrderItem extends StatelessWidget {
  final OrderModel order;

  const OrderItem({super.key, required this.order});

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: EdgeInsets.only(bottom: UIConfig.marginMedium),
      padding: EdgeInsets.all(UIConfig.paddingMedium),
      decoration: BoxDecoration(
        color: AppColors.card(context),
        borderRadius: BorderRadius.circular(UIConfig.borderRadiusMedium),
        border: Border.all(color: AppColors.border(context)),
      ),
      child: InkWell(
        onTap: () => Get.toNamed('/order-details', arguments: order.id),
        borderRadius: BorderRadius.circular(UIConfig.borderRadiusMedium),
        child: Row(
          children: [
            Container(
              width: 40,
              height: 40,
              decoration: BoxDecoration(
                color: AppColors.secondary(context),
                borderRadius: BorderRadius.circular(UIConfig.borderRadiusSmall),
              ),
              child: Icon(
                Icons.receipt_outlined,
                size: 20,
                color: AppColors.foreground(context),
              ),
            ),
            SizedBox(width: UIConfig.marginMedium),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'orders.order_number'.translate().replaceFirst(
                      '{number}',
                      order.orderNumber,
                    ),
                  ).subtitle1(context),
                  SizedBox(height: 4),
                  Text(
                    'orders.items_count'.translate().replaceFirst(
                      '{count}',
                      order.itemCount.toString(),
                    ),
                  ).body(
                    context,
                    style: TextStyle(color: AppColors.mutedForeground(context)),
                  ),
                  SizedBox(height: 4),
                  Text(order.formattedDate).caption(
                    context,
                    style: TextStyle(color: AppColors.mutedForeground(context)),
                  ),
                ],
              ),
            ),
            Container(
              padding: EdgeInsets.symmetric(
                horizontal: UIConfig.paddingSmall,
                vertical: 4,
              ),
              decoration: BoxDecoration(
                color: _getStatusColor(order.status, context).withOpacity(0.1),
                borderRadius: BorderRadius.circular(UIConfig.borderRadiusSmall),
              ),
              child: Text(
                // Ensure correct translation by using a valid translation key
                'orders.status.${order.status.toLowerCase()}'.translate(),
              ).caption(
                context,
                style: TextStyle(
                  fontWeight: FontWeight.w500,
                  color: _getStatusColor(order.status, context),
                ),
              ),
            ),
            SizedBox(width: UIConfig.marginSmall),
            Icon(
              Icons.chevron_right,
              color: AppColors.mutedForeground(context),
              size: 20,
            ),
          ],
        ),
      ),
    );
  }

  Color _getStatusColor(String status, BuildContext context) {
    switch (status.toLowerCase()) {
      case 'pending':
        return const Color(0xFFFFA500); // Orange for pending
      case 'processing':
        return AppColors.primary(context); // Primary color for processing
      case 'shipped':
        return const Color(0xFF007BFF); // Blue for shipped
      case 'delivered':
        return const Color(0xFF28A745); // Green for delivered
      case 'cancelled':
        return AppColors.destructive(context); // Red for cancelled
      case 'placed':
        return const Color(0xFF9C27B0); // Purple for placed
      case 'confirmed':
        return const Color(0xFF3F51B5); // Indigo for confirmed
      case 'returned':
        return const Color(0xFF795548); // Brown for returned
      default:
        return AppColors.mutedForeground(context);
    }
  }
}

