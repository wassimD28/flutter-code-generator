name: Generate Flutter App

on:
  workflow_dispatch:
    inputs:
      jobId:
        description: "Job ID for tracking"
        required: true
      storeId:
        description: "Store ID"
        required: true
      callbackUrl:
        description: "Callback URL for status updates"
        required: true
      config:
        description: "Store configuration JSON"
        required: true

jobs:
  generate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Create config file
        run: |
          echo '${{ github.event.inputs.config }}' > quick-config.json
          npm run convert:to-store

      - name: Generate Flutter app
        id: generate
        run: |
          npm run generate:fashion
          echo "Listing generated directory contents:"
          ls -la generated-app
          echo "Checking for pubspec.yaml:"
          cat generated-app/pubspec.yaml
          echo "::set-output name=app_path::generated-app"

      # Set up Flutter BEFORE using any Flutter commands
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.10.0"
          
      - name: Installing app dependencies
        id: dependencies
        continue-on-error: true  # Continue even if this step fails
        run: |
          cd generated-app
          flutter pub get
          
      - name: Generate app icon
        id: icon
        if: steps.dependencies.outcome == 'success'
        continue-on-error: true
        run: |
          cd generated-app
          flutter pub run flutter_launcher_icons:main
          
      - name: Generate app splash
        id: splash
        if: steps.icon.outcome == 'success'
        continue-on-error: true
        run: |
          cd generated-app
          flutter pub run flutter_native_splash:create

      - name: Build APK
        id: build_apk
        if: steps.splash.outcome == 'success'
        continue-on-error: true
        run: |
          cd generated-app
          flutter build apk --release

      - name: Upload APK to ImageKit
        id: imagekit_upload
        if: steps.build_apk.outcome == 'success'
        continue-on-error: true
        env:
          IMAGEKIT_PUBLIC_KEY: ${{ secrets.IMAGEKIT_PUBLIC_KEY }}
          IMAGEKIT_PRIVATE_KEY: ${{ secrets.IMAGEKIT_PRIVATE_KEY }}
          IMAGEKIT_URL_ENDPOINT: ${{ secrets.IMAGEKIT_URL_ENDPOINT }}
        run: |
          # Install ImageKit upload tool
          npm install -g imagekit-cli

          # Set APK filename with storeId and jobId for unique identification
          APK_FILENAME="app-${{ github.event.inputs.storeId }}-${{ github.event.inputs.jobId }}.apk"

          # Use ImageKit CLI to upload the APK
          APK_PATH="generated-app/build/app/outputs/flutter-apk/app-release.apk"
          UPLOAD_RESULT=$(imagekit upload --file "$APK_PATH" --fileName "$APK_FILENAME" --folder "/store-apps" --usePrivateKey)

          # Extract the URL from the upload result using grep and sed
          DOWNLOAD_URL=$(echo "$UPLOAD_RESULT" | grep -o '"url":"[^"]*"' | sed 's/"url":"//;s/"//')

          # Set output variable for use in next step
          echo "download_url=$DOWNLOAD_URL" >> $GITHUB_OUTPUT
          echo "APK uploaded to: $DOWNLOAD_URL"

      - name: Upload APK as GitHub artifact (backup)
        if: steps.build_apk.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: generated-app/build/app/outputs/flutter-apk/app-release.apk

      # Always send a callback, regardless of previous step outcomes
      - name: Send completion callback
        if: always()
        run: |
          STATUS="FAILED"
          PROGRESS=0
          MESSAGE="Flutter app generation failed"
          
          # If APK was successfully built and uploaded
          if [[ "${{ steps.imagekit_upload.outcome }}" == "success" && "${{ steps.imagekit_upload.outputs.download_url }}" != "" ]]; then
            STATUS="COMPLETED"
            PROGRESS=100
            MESSAGE="Flutter app generation completed successfully"
            DOWNLOAD_URL="${{ steps.imagekit_upload.outputs.download_url }}"
          fi
          
          # Send callback with appropriate status
          curl -X POST "${{ github.event.inputs.callbackUrl }}" \
            -H "Content-Type: application/json" \
            -d '{
              "jobId": "${{ github.event.inputs.jobId }}",
              "status": "'"$STATUS"'",
              "downloadUrl": "'"${DOWNLOAD_URL:-""}"'",
              "progress": '"$PROGRESS"',
              "message": "'"$MESSAGE"'"
            }'