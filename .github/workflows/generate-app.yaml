name: Generate Flutter App

on:
  workflow_dispatch:
    inputs:
      jobId:
        description: "Job ID for tracking"
        required: true
      storeId:
        description: "Store ID"
        required: true
      callbackUrl:
        description: "Callback URL for status updates"
        required: true
      config:
        description: "Store configuration JSON"
        required: true

jobs:
  generate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Create config file
        run: |
          echo '${{ github.event.inputs.config }}' > quick-config.json
          npm run convert:to-store

      - name: Generate Flutter app
        id: generate
        run: |
          npm run generate:fashion
          echo "Listing generated directory contents:"
          ls -la generated-app
          echo "Checking for pubspec.yaml:"
          cat generated-app/pubspec.yaml
          echo "app_path=generated-app" >> $GITHUB_OUTPUT

      # Clear Flutter SDK caches and install the required version
      - name: Clean any existing Flutter installations
        run: |
          rm -rf $HOME/.flutter $HOME/.pub-cache
          
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.3'  # Updated to a newer version
          channel: 'stable'
          cache: false  # Disable caching to ensure clean installation

      - name: Verify Flutter and Dart versions
        run: |
          flutter --version
          dart --version
          
      # Update the dependency constraints in pubspec.yaml
      - name: Adjust dependencies in pubspec.yaml
        run: |
          cd generated-app
          # First, update the SDK constraints
          sed -i 's/sdk: ".*"/sdk: ">=2.19.0 <4.0.0"/' pubspec.yaml
          
          # Then update flutter_lints to a compatible version
          if grep -q "flutter_lints:" pubspec.yaml; then
            sed -i 's/flutter_lints: .*/flutter_lints: ^2.0.0/' pubspec.yaml
          fi
          
          echo "Modified pubspec.yaml:"
          cat pubspec.yaml
          
      - name: Installing app dependencies
        id: dependencies
        continue-on-error: true  # Continue even if this step fails
        run: |
          cd generated-app
          flutter pub get
          
      - name: Generate app icon
        id: icon
        if: steps.dependencies.outcome == 'success'
        continue-on-error: true
        run: |
          cd generated-app
          flutter pub run flutter_launcher_icons:main
          
      - name: Generate app splash
        id: splash
        if: steps.icon.outcome == 'success'
        continue-on-error: true
        run: |
          cd generated-app
          flutter pub run flutter_native_splash:create

      - name: Build APK
        id: build_apk
        if: steps.splash.outcome == 'success'
        continue-on-error: true
        run: |
          cd generated-app
          flutter build apk --release

      - name: Upload APK to ImageKit
        id: imagekit_upload
        if: steps.build_apk.outcome == 'success'
        continue-on-error: true
        env:
          IMAGEKIT_PUBLIC_KEY: ${{ secrets.IMAGEKIT_PUBLIC_KEY }}
          IMAGEKIT_PRIVATE_KEY: ${{ secrets.IMAGEKIT_PRIVATE_KEY }}
          IMAGEKIT_URL_ENDPOINT: ${{ secrets.IMAGEKIT_URL_ENDPOINT }}
        run: |
          # Install ImageKit upload tool
          npm install -g imagekit-cli

          # Set APK filename with storeId and jobId for unique identification
          APK_FILENAME="app-${{ github.event.inputs.storeId }}-${{ github.event.inputs.jobId }}.apk"

          # Use ImageKit CLI to upload the APK
          APK_PATH="generated-app/build/app/outputs/flutter-apk/app-release.apk"
          
          echo "Uploading APK from path: $APK_PATH"
          
          if [ ! -f "$APK_PATH" ]; then
            echo "Error: APK file not found at $APK_PATH"
            exit 1
          fi
          
          UPLOAD_RESULT=$(imagekit upload --file "$APK_PATH" --fileName "$APK_FILENAME" --folder "/store-apps" --usePrivateKey)
          
          echo "Upload result: $UPLOAD_RESULT"

          # Extract the URL from the upload result using grep and sed
          DOWNLOAD_URL=$(echo "$UPLOAD_RESULT" | grep -o '"url":"[^"]*"' | sed 's/"url":"//;s/"//')
          
          if [ -n "$DOWNLOAD_URL" ]; then
            echo "download_url=$DOWNLOAD_URL" >> $GITHUB_OUTPUT
            echo "APK uploaded to: $DOWNLOAD_URL"
          else
            echo "Failed to extract download URL from the upload result"
            exit 1
          fi

      - name: Upload APK as GitHub artifact (backup)
        if: steps.build_apk.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: generated-app/build/app/outputs/flutter-apk/app-release.apk

      # Enhanced callback with robust error handling and URL validation
      - name: Send completion callback
        if: always()
        run: |
          STATUS="FAILED"
          PROGRESS=0
          MESSAGE="Flutter app generation failed"
          
          # Initialize with empty string, not undefined
          DOWNLOAD_URL=""
          
          # Debug information
          echo "ImageKit upload outcome: ${{ steps.imagekit_upload.outcome }}"
          echo "ImageKit download URL output: ${{ steps.imagekit_upload.outputs.download_url }}"
          
          # If APK was successfully built and uploaded
          if [[ "${{ steps.imagekit_upload.outcome }}" == "success" ]]; then
            if [[ -n "${{ steps.imagekit_upload.outputs.download_url }}" ]]; then
              STATUS="COMPLETED"
              PROGRESS=100
              MESSAGE="Flutter app generation completed successfully"
              DOWNLOAD_URL="${{ steps.imagekit_upload.outputs.download_url }}"
              echo "Download URL set to: $DOWNLOAD_URL"
            else
              echo "Warning: ImageKit upload was successful but no download URL was provided"
            fi
          else
            echo "ImageKit upload step was not successful or was skipped"
          fi
          
          # Validate callback URL - don't proceed if it's undefined
          CALLBACK_URL="${{ github.event.inputs.callbackUrl }}"
          
          if [[ "$CALLBACK_URL" == *"undefined"* || -z "$CALLBACK_URL" ]]; then
            echo "Error: Invalid callback URL: $CALLBACK_URL"
            exit 1
          fi
          
          echo "Callback URL: $CALLBACK_URL"
          
          # Construct the JSON payload using a temporary file to avoid shell interpretation issues
          cat > payload.json << EOF
          {
            "jobId": "${{ github.event.inputs.jobId }}",
            "status": "$STATUS",
            "downloadUrl": "$DOWNLOAD_URL",
            "progress": $PROGRESS,
            "message": "$MESSAGE"
          }
          EOF
          
          # Show the payload for debugging
          echo "Sending payload:"
          cat payload.json
          
          # Send callback with appropriate status and verbose output for debugging
          curl -v -X POST "$CALLBACK_URL" \
            -H "Content-Type: application/json" \
            --data @payload.json